/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    
  
    static bool cmp(Interval a, Interval b)
    {
        if(a.start < b.start)
        {
            return true;
        }
        else return false;
    }
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> result;
        if(intervals.empty())
            return result;
        sort(intervals.begin(), intervals.end(), cmp);
        int i = 0,k=-1;
        while(i<intervals.size())
        {
            if(k==-1)
            {
                result.push_back(intervals[i]);
                k++;
            }
            else
            {
                 if(result[k].start<=intervals[i].start && result[k].end>=intervals[i].start)
                 {
                     result[k].end = max(result[k].end, intervals[i].end);
                 }
                else
                {
                    result.push_back(intervals[i]);
                    k++;
                }
            }
            i++;
        }
        
        
        return result;
    }
};
